# -*- coding: utf-8 -*-
"""
Created on Mon April 25 19:42:41 2023
This code was written by group 17
Morten Deurell - s206073
Oscar Max Hagemann - s214356
Tobias Canger Lund - s214365 
"""
#################
# Imports
#################
import numpy as np
from roundGrades import roundGrade

#################
# Functions
#################

def computeFinalGrades(grades):
    
    #The empty list that the vector eventually will end up as
    gradesFinal = [None]*len(grades)
    
    #This for loop checks every number and if one of them is -3 it replaces the entire row with -3
    for i in range(len(grades)):
        if -3 in grades[i]:
            grades[i] = [-3] * len(grades[i])
            
    #If there is only 1 assignment its just a matter of turning the matrix from a M x 1 to a 1 x M
    #This could be done witha transpose command, but that requires the matrix to be an np.array
    if len(grades[0]) == 1:
        grades = [item for sublist in grades for item in sublist]
        gradesFinal = roundGrade(grades)
        
    #Now here, where there is more than 1 assignment, we need an np.array, and the first thing we're gonna do with that is remove the lowest value of it
    elif len(grades[0]) > 1:
        grades = np.array(grades)
        Min = np.argmin(grades, axis=1)
        
        #The lowest number was pointed out previously, but not deleted, that is what we need the np.delete function for, it eliminates the value Min
        grades = np.array([np.delete(row, idx) for row, idx in zip(grades, Min)])
        
        #Also we transposed the matrix, took the average of the remaining grades and rounded it with the previous function
        grades = np.transpose(grades)
        grades = np.mean(grades, axis=0)
        gradesFinal = roundGrade(grades)

    return gradesFinal     
            

#################
# Test and debugging
#################

#array = [[2, 4, 4, 4, 0, 7, 4, 7, 10, 12, 4, 2, 10, 4, 4, 4, 7, 7, 12, 7, 0, 7, 12, 12, 7, 2, 4], [2, 4, 12, 4, 0, 10, 4, 4, 0, 10, 10, 7, 10, 4, 7, 4, 0, 0, 12, 12, 0, 4, 0, 4, 10, 4, 4], [10, 2, 0, 7, 4, 0, 12, 4, 4, 4, 4, 12, 7, 12, 4, 10, 4, 4, 4, 7, 10, 0, 10, 7, 2, 10, 7], [2, 12, 2, 4, 12, 12, 10, 12, 10, 7, 4, 10, 4, 4, 12, 7, 0, 4, 12, 10, 4, 4, 0, 4, 2, 7, 2], [10, 4, 4, 10, 12, 0, 7, 4, 7, 4, 2, 4, 0, 10, 0, 0, 7, 4, 12, 0, 12, 12, 4, 12, 0, 2, 12], [0, 0, 4, 4, 7, 10, 0, 12, 4, 10, 0, 2, 12, 10, 4, 7, 2, 10, 12, 4, 10, 2, 12, 7, 4, 4, 4], [12, 0, 7, 7, 4, 4, 4, 4, 2, 4, 4, 7, 7, 2, 12, 12, 10, 10, 4, 4, 4, 7, 12, 0, 4, 4, 4], [10, 4, 7, 12, 12, 2, 7, 0, 0, 4, 10, 0, 2, 2, 4, 4, 7, 12, 7, 2, 10, 2, 7, 4, 12, 0, 4], [2, 0, 12, 4, 4, 7, 10, 4, 4, 4, 7, 7, 12, 10, 4, 0, 10, 12, 12, 0, 4, 7, 12, 12, 4, 12, 10], [0, 10, 10, 12, 4, 12, 4, 0, 7, 0, 0, 10, 12, 10, 4, 4, 0, 2, 4, 4, 0, 7, 12, 10, 7, 4, 0], [0, 0, 2, 2, 7, 12, 4, 10, 12, 10, 10, 0, 4, 7, 4, 2, 12, 4, 4, 0, 7, 7, 4, 2, 4, 4, 0], [4, 2, 0, 4, 0, 7, 7, 2, 2, 4, 4, 10, 7, 0, 12, 0, 7, 4, 4, 10, 10, 2, 7, 0, 12, 4, 10], [10, 2, 7, 2, 4, 7, 7, 12, 0, 4, 4, 10, 7, 4, 0, 10, 0, 7, 4, 4, 7, 2, 10, 7, 4, 7, 0], [4, 7, 2, 7, 10, 2, 2, 10, 12, 4, 0, 7, 10, 7, 4, 10, 4, 0, 12, 0, 4, 4, 0, 10, 12, 10, 12], [12, 0, 12, 7, 10, 7, 4, 12, 7, 10, 10, 10, 4, 10, 2, 2, 10, 0, 7, 2, 10, 12, 4, 7, 0, 7, 4], [0, 7, 2, 0, 4, 2, 10, 4, 0, 12, 4, 10, 4, 12, 4, 2, 7, 7, 4, 7, 7, 4, 12, 4, 0, 4, 4], [2, 10, 12, 12, 10, 12, 4, 4, 7, 0, 2, 12, 0, 12, 4, 4, 0, 7, 0, 4, 2, 12, 12, 0, 7, 10, 2], [4, 4, 4, 4, 4, 4, 0, 12, 4, 10, 10, 12, 7, 4, 7, 7, 4, 7, 4, 10, 7, 4, 10, 0, 4, 10, 4], [4, 10, 10, 4, 4, 2, 4, 4, 7, 4, 4, 4, 10, 12, 10, 4, 0, 10, 12, 4, 2, 4, 7, 0, 2, 0, 7], [10, 0, 7, 12, 12, 2, 12, 4, 2, 4, 2, 12, 10, 0, 4, 10, 4, 4, 7, 0, 4, 4, 10, 12, 4, 4, 7], [7, 12, 4, 4, 7, 4, 10, 7, 0, 0, 7, 12, 2, 12, 4, 7, 10, 12, 10, 10, 4, 7, 0, 12, 7, 4, 4], [0, 4, 4, 0, 2, 2, 4, 4, 0, 10, 7, 12, 4, 12, 4, 4, 12, 7, 2, 10, 0, 4, 12, 0, 4, 0, 4], [7, 10, 12, 7, 10, 2, 0, 0, 7, 10, 0, 12, 2, 0, 4, 7, 7, 7, 4, 4, 12, 4, 10, 4, 7, 4, 4], [2, 4, 12, 4, 4, 4, 4, 10, 4, 4, 4, 2, 7, 0, 4, 10, 4, 7, 12, 4, 0, 2, 12, 12, 4, 7, 10], [4, 12, 0, 0, 12, 12, 4, 4, 7, 10, 7, 0, 12, 4, 0, 12, 12, 4, 4, 12, 10, 7, 10, 4, 12, 2, 10], [12, 4, 12, 10, 0, 4, 0, 7, 7, 2, 7, 4, 7, 4, 0, 4, 10, 2, 4, 2, 7, 12, 2, 4, 4, 4, 4], [2, 4, 2, 10, 10, 4, 4, 0, 4, 0, 7, 0, 0, 4, 10, 12, 2, 4, 10, 7, 7, 2, 10, 10, 10, 12, 12], [7, 4, 4, 7, 10, 12, 0, 7, 0, 10, 4, 2, 4, 4, 4, 4, 4, 4, 12, 4, 4, 0, 7, 2, 12, 0, 2], [12, 4, 2, 4, 12, 12, 4, 2, 4, 10, 4, 0, 0, 4, 0, 4, 4, 12, 2, 10, 7, 7, 0, 4, 12, 10, 0], [2, 0, 4, 4, 12, 4, 4, 4, 4, 0, 0, 4, 7, 7, 7, 12, 4, 10, 4, 0, 0, 7, 0, 4, 7, 4, 0], [0, 4, 10, 12, 4, 4, 10, 4, 10, 12, 10, 10, 12, 4, 4, 4, 4, 2, 12, 2, 12, 0, 4, 10, 12, 4, 7], [4, 4, 4, 7, 10, 7, 4, 7, 4, 4, 4, 4, 2, 4, 2, 2, 2, 4, 10, 7, 0, 2, 2, 4, 4, 2, 12], [4, 4, 7, 4, 7, 4, 0, 2, 7, 4, 12, 12, 0, 4, 12, 12, 7, 0, 7, 10, 4, 2, 4, 12, 4, 7, 7], [12, 12, 7, 10, 12, 7, 10, 0, 4, 2, 4, 2, 10, 7, 12, 4, 4, 10, 0, 0, 10, 0, 7, 10, 0, 4, 12], [2, 10, 4, 4, 4, 10, 4, 0, 0, 10, 4, 12, 0, 7, 7, 2, 0, 2, 0, 10, 4, 0, 2, 4, 2, 10, 12], [12, 2, 10, 7, 2, 2, 2, 2, 12, 4, 0, 4, 0, 10, 4, 4, 7, 7, 4, 4, 7, 4, 7, 0, 10, 10, 7], [0, 4, 2, 12, 4, 2, 4, 7, 12, 4, 12, 4, 4, 0, 10, 4, 0, 12, 10, 10, 12, 4, 12, 2, 0, 4, 7], [7, 4, 2, 10, 4, 7, 2, 12, 10, 10, 10, 4, 7, 4, 4, 10, 12, 12, 10, 2, 12, 7, 4, 4, 7, 7, 0], [10, 4, 4, 7, 2, 0, 4, 2, 2, 10, 2, 4, 0, 2, 0, 12, 2, 4, 7, 4, 7, 4, 12, 12, 4, 7, 4], [7, 10, 12, 7, 0, 4, 2, 4, 2, 4, 7, 4, 7, 12, 7, 4, 2, 4, 4, 12, 7, 12, 4, 4, 12, 4, 2], [10, 4, 10, 0, 10, 7, 4, 4, 0, 2, 12, 0, 12, 2, 2, 4, 2, 4, 0, 12, 0, 7, 2, 7, 4, 2, 10], [0, 2, 12, 7, 0, 12, 10, 4, 2, 4, 7, 4, 4, 7, 4, 12, 2, 0, 7, 10, 12, 4, 12, 4, 12, 7, 0], [7, 4, 2, 4, 0, 4, 7, 2, 4, 4, 4, 0, 7, 4, 12, 2, 12, 12, 4, 10, 10, 7, 2, 7, 2, 4, 10]]
#print(computeFinalGrades(array))